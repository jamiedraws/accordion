.accordion, .accordion__button {
  outline: none;
}

.accordion__button[aria-expanded=true]:focus, .accordion__button:focus, .accordion--is-focused, .accordion:focus-within {
  outline-color: Highlight;
  outline-color: -webkit-focus-ring-color;
  outline-style: auto;
}

*,
::before,
::after {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

html,
body {
  width: 100%;
  height: auto;
}

html {
  word-wrap: break-word;
  overflow-wrap: break-word;
  -webkit-text-size-adjust: 100%;
  -moz-text-size-adjust: 100%;
  text-size-adjust: 100%;
}

body {
  margin: 0;
  overflow-x: hidden;
}
@supports (display: flex) {
  body {
    min-height: 100vh;
    display: flex;
    flex-direction: column;
  }
}
body > footer {
  flex: 1;
}

main {
  display: block;
  flex: 1;
}

a:focus,
button:focus,
label:focus {
  outline: 2px solid currentColor;
}

:link,
:visited {
  text-decoration: underline;
  color: inherit;
  word-break: break-word;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  word-break: break-word;
}

ul,
ol {
  margin-left: 1.5rem;
}

img {
  max-width: 100%;
  height: auto;
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
}

img,
iframe,
picture,
figure {
  display: block;
}

iframe,
img {
  border: 0;
}

figure {
  margin: 0;
}

small {
  font-size: 80%;
}

sup,
sub {
  font-size: 50%;
  line-height: 0;
  position: relative;
  margin: 0 0.25em;
}

sup {
  bottom: 0.33em;
}

sub {
  bottom: -0.33em;
}

button,
input,
select {
  background: none;
  border: 0;
  font-size: 16px;
  border-radius: 0;
  box-shadow: none;
  word-break: break-all;
  text-overflow: ellipsis;
}
button:not([type=checkbox]):not([type=radio]),
input:not([type=checkbox]):not([type=radio]),
select:not([type=checkbox]):not([type=radio]) {
  -webkit-appearance: none;
  -moz-appearance: none;
       appearance: none;
}

button,
select {
  cursor: pointer;
}

body {
  font-family: "Noto Sans", sans-serif;
  line-height: 1.45;
}

@supports (position: sticky) {
  .view__anchor {
    top: -6rem;
  }
}
@media all and (max-width: 1000px) {
  .view__anchor {
    top: -6rem;
  }
}
@supports (position: sticky) {
  .view__scroll {
    top: 6rem;
  }
}
@media all and (max-width: 1000px) {
  .view__scroll {
    top: 6rem;
  }
}

.defer--from-top::after {
  top: calc(30vh - 6rem);
}

@media all and (max-width: 1000px) {
  .defer--from-top::after {
    top: calc(30vh - 6rem);
  }
}
.view {
  position: relative;
}
.view__anchor {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
}
.view__in {
  position: relative;
}
.view__scroll {
  position: sticky;
}

.section {
  margin: 0;
}
.section__contain {
  max-width: 1000px;
  margin: auto;
  box-sizing: content-box;
}
.section__in {
  max-width: 1000px;
  margin: auto;
  box-sizing: content-box;
  padding: 2rem;
}
.section__block {
  margin-top: 3rem;
  margin-bottom: 3rem;
}

.form {
  min-width: 0;
}
.form__title {
  font-size: 3.6rem;
  text-align: center;
  margin: 1rem;
}
@media all and (max-width: 1200px) {
  .form__title {
    font-size: clamp(2.5rem, 7vw, 3.6rem);
  }
}
.form__is-hidden {
  display: none;
}
.form__contain {
  display: flex;
  flex-wrap: wrap;
  align-items: stretch;
  justify-content: space-between;
  border: solid transparent;
  border-width: 3px;
  min-width: 0;
  min-inline-size: 0;
}
.form__contain > * {
  flex: 0 1 auto;
}
.form__field {
  flex: 1;
  display: inline-flex;
  align-items: center;
  min-width: 0;
  padding: 1rem;
  margin: 0;
  -webkit-appearance: none;
  -moz-appearance: none;
       appearance: none;
  border: 0;
  background: white;
  color: black;
  font-family: inherit;
}
.form__error {
  color: #c00;
  font-weight: bold;
}

.form__fieldset {
  border: 0;
  display: flex;
  flex-wrap: wrap;
  margin: -1rem;
}
.form__fieldset > * {
  margin: 1rem;
}
.form__fieldset > * {
  flex: 1 1 15rem;
}

.form__checkbox-label {
  display: flex;
  flex-wrap: wrap;
  align-items: flex-start;
}
.form__checkbox-label .form__label {
  display: flex;
}
.form__checkbox-label input[type=checkbox],
.form__checkbox-label input[type=radio] {
  opacity: 0;
  position: absolute;
  padding: 0;
}
.form__checkbox-label input[type=checkbox]:checked ~ .form__checkbox, .form__checkbox-label input[type=checkbox]:checked ~ .form__label > .form__checkbox,
.form__checkbox-label input[type=radio]:checked ~ .form__checkbox,
.form__checkbox-label input[type=radio]:checked ~ .form__label > .form__checkbox {
  background-image: url("data:image/svg+xml;charset=utf8,                        %3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E                            %3Cpath fill='none' stroke-width='3px' stroke='green' d='M1.73,12.91 8.1,19.28 22.79,4.59'%3E%3C/path%3E                        %3C/svg%3E");
  background-size: 0.9em 0.9em;
  background-repeat: no-repeat;
  background-position: center;
  background-color: white;
}
.form__checkbox-label input[type=checkbox]:not(:checked) ~ .form__expando,
.form__checkbox-label input[type=radio]:not(:checked) ~ .form__expando {
  display: none;
}
.form__checkbox-label input[type=checkbox] ~ .form__checkbox,
.form__checkbox-label input[type=checkbox] ~ .form__label > .form__checkbox,
.form__checkbox-label input[type=radio] ~ .form__checkbox,
.form__checkbox-label input[type=radio] ~ .form__label > .form__checkbox {
  margin-right: 1rem;
}
.form__checkbox-label input[type=checkbox]:focus ~ .form__checkbox, .form__checkbox-label input[type=checkbox]:focus ~ .form__label > .form__checkbox,
.form__checkbox-label input[type=radio]:focus ~ .form__checkbox,
.form__checkbox-label input[type=radio]:focus ~ .form__label > .form__checkbox {
  outline: 3px solid;
}
.form__checkbox-label input[type=checkbox]:disabled ~ .form__label,
.form__checkbox-label input[type=radio]:disabled ~ .form__label {
  opacity: 0.5;
}
.form__checkbox {
  display: block;
  -webkit-appearance: none;
  border: 1px solid currentColor;
  border-radius: 0.5rem;
  background: white;
  font-family: inherit;
  font-size: inherit;
  width: 2rem;
  height: 2rem;
  flex: 0 0 2rem;
  padding: 0;
  box-sizing: content-box;
  position: relative;
}

.form__group {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-around;
  overflow: hidden;
  margin: -0.5rem;
}
.form__group > * {
  flex: 0 1 auto;
}
.form__group > * {
  margin: 0.5rem;
}
.form__fieldset {
  align-items: center;
}
.form__label {
  align-items: center;
}

.accordion__header {
  margin: 0;
}
.accordion__button {
  -webkit-appearance: none;
  -moz-appearance: none;
       appearance: none;
  background: transparent;
  border: none;
  margin: 0;
  padding: 0;
  display: block;
  width: 100%;
  font: inherit;
  text-align: left;
}
.accordion__section[hidden] {
  display: none;
}
.card {
  border: 0.05rem solid;
  margin: 1rem 0;
}
.card button, .card__section {
  padding: 1rem;
}
.card__section {
  border-top: 0.05rem solid;
}
.card__content > * + * {
  margin-top: 1rem;
}
/*# sourceURL=webpack://./Shared/scss/template/base/components/_accordion.scss */
/*# sourceURL=webpack://./css/app.scss */
/*# sourceURL=webpack://./Shared/scss/template/base/layouts/_document.scss */
/*# sourceURL=webpack://./css/layouts/_document.scss */
/*# sourceURL=webpack://./Shared/scss/template/base/layouts/_view.scss */
/*# sourceURL=webpack://./Shared/scss/template/base/utils/_defer.scss */
/*# sourceURL=webpack://./Shared/scss/template/base/layouts/_section.scss */
/*# sourceURL=webpack://./Shared/scss/template/base/layouts/_form.scss */
/*# sourceURL=webpack://./Shared/scss/template/base/abstracts/_group.scss */
/*# sourceURL=webpack://./css/layouts/_form.scss */
/*# sourceURL=webpack://./css/components/_card.scss */
/*# sourceURL=webpack://./Shared/scss/template/base/abstracts/_copy.scss */
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */